#!/bin/bash

source ./parameters

if [ $# != 1 ]
then
        echo "usage $0 interface"
        exit 1
fi

unamestr=$(uname)

if [[ $unamestr == 'Darwin' ]]; then
    ip=$(/sbin/ifconfig $1 | grep 'inet ' | cut -d" " -f2)
elif [[ $unamestr == 'Linux' ]]; then
    ip=$(/sbin/ifconfig $1 | grep 'inet addr': | cut -d: -f2 | cut -d" " -f1)
fi

echo $ip

awk -v features=$FEATURES 'BEGIN { exit index(features, "odl-netconf-all") }'
if [ "$?" != "0" ];
then
	echo "mounting netconf nodes"
	while read -r line
	do
		addr=$(echo $line | cut -f1 -d" ")
		name=$(echo $line | cut -f2 -d" ")
		echo $name $addr
		python python/put-node.py localhost $addr $name $NETCONF_PORT $NETCONF_USER $NETCONF_PASS
		sleep 2

		while true;
		do
			python python/is-node-connected.py $ip $name
	  		if [ $? -eq 0 ]
      			then
      				echo "NETCONF node $name up"
        			break
      			else
      				sleep 2
      			fi
		done
	done < nodes
fi

awk -v features=$FEATURES 'BEGIN { exit index(features, "odl-bgpcep-bgp") }'
if [ "$?" != "0" ];
then
	echo "configuring BGP"

	# configure BGP RIB
	python python/put-bgp-rib.py $ip $LOCAL_AS 

	# configure app peer
	python python/put-app-rib.py $ip 1.2.3.4

	echo "configuring BGP peer using NETCONF"
	python python/put-bgp-neighbor.py $ip $BGP_NODE $LOCAL_AS $REMOTE_AS

	if [ $BGP_NEXT_HOP ];
	then
		echo "adding static route to peer using NETCONF"
		python python/put-static-route.py $ip $BGP_NODE $ip 32 $BGP_NEXT_HOP 
	fi
	
	# configure ODL to talk to BGP peer
	python python/put-bgp-peer.py $ip $BGP_PEER $LOCAL_AS $REMOTE_AS
fi

awk -v features=$FEATURES 'BEGIN { exit index(features, "odl-bgpcep-pcep") }'
if [ "$?" != "0" ];
then
	echo "configuring PCE-P"
	
	while read -r line
	do
		name=$(echo $line | cut -f2 -d" ")
		echo $name 
	
		python python/put-pcep-client.py $ip $name 
	done < nodes
fi
